[
  {
    "objectID": "Fitting Linear Models.html",
    "href": "Fitting Linear Models.html",
    "title": "Fitting Linear Models",
    "section": "",
    "text": "We will use a dataset from the UCI Machine Learning Repository. This data set is about bike sharing rentals and is available at the assignment link. You can learn more about the data here. The data is available at https://www4.stat.ncsu.edu/~online/datasets/SeoulBikeData.csv\nThe data description describes the following variables:\n• Date : day/month/year\n• Rented Bike count - Count of bikes rented at each hour\n• Hour - Hour of the day\n• Temperature-Temperature in Celsius\n• Humidity - %\n• Windspeed - m/s\n• Visibility - 10m\n• Dew point temperature - Celsius\n• Solar radiation - MJ/m2\n• Rainfall - mm\n• Snowfall - cm\n• Seasons - Winter, Spring, Summer, Autumn\n• Holiday - Holiday/No holiday\n• Functional Day - NoFunc(Non Functional Hours), Fun(Functional hours)"
  },
  {
    "objectID": "Fitting Linear Models.html#data",
    "href": "Fitting Linear Models.html#data",
    "title": "Fitting Linear Models",
    "section": "",
    "text": "We will use a dataset from the UCI Machine Learning Repository. This data set is about bike sharing rentals and is available at the assignment link. You can learn more about the data here. The data is available at https://www4.stat.ncsu.edu/~online/datasets/SeoulBikeData.csv\nThe data description describes the following variables:\n• Date : day/month/year\n• Rented Bike count - Count of bikes rented at each hour\n• Hour - Hour of the day\n• Temperature-Temperature in Celsius\n• Humidity - %\n• Windspeed - m/s\n• Visibility - 10m\n• Dew point temperature - Celsius\n• Solar radiation - MJ/m2\n• Rainfall - mm\n• Snowfall - cm\n• Seasons - Winter, Spring, Summer, Autumn\n• Holiday - Holiday/No holiday\n• Functional Day - NoFunc(Non Functional Hours), Fun(Functional hours)"
  },
  {
    "objectID": "Fitting Linear Models.html#reading-data",
    "href": "Fitting Linear Models.html#reading-data",
    "title": "Fitting Linear Models",
    "section": "Reading Data",
    "text": "Reading Data\nBefore we can work with the data, we need to read it in!\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n\nbike_data &lt;- readr::read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/SeoulBikeData.csv\",\n                             locale=locale(encoding=\"latin1\"))\n\nRows: 8760 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nbike_data\n\n# A tibble: 8,760 × 14\n   Date       `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n   &lt;chr&gt;                    &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 01/12/2017                 254     0              -5.2            37\n 2 01/12/2017                 204     1              -5.5            38\n 3 01/12/2017                 173     2              -6              39\n 4 01/12/2017                 107     3              -6.2            40\n 5 01/12/2017                  78     4              -6              36\n 6 01/12/2017                 100     5              -6.4            37\n 7 01/12/2017                 181     6              -6.6            35\n 8 01/12/2017                 460     7              -7.4            38\n 9 01/12/2017                 930     8              -7.6            37\n10 01/12/2017                 490     9              -6.5            27\n# ℹ 8,750 more rows\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;chr&gt;, Holiday &lt;chr&gt;,\n#   `Functioning Day` &lt;chr&gt;"
  },
  {
    "objectID": "Fitting Linear Models.html#eda",
    "href": "Fitting Linear Models.html#eda",
    "title": "Fitting Linear Models",
    "section": "EDA",
    "text": "EDA\n1. We first need to check for missingness in the data.\n\nsum_na &lt;- function(column){\n  sum(is.na(column))\n}\n\nna_counts &lt;- bike_data |&gt;\n  summarize(across(everything(), sum_na))\nna_counts\n\n# A tibble: 1 × 14\n   Date `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n  &lt;int&gt;               &lt;int&gt; &lt;int&gt;             &lt;int&gt;         &lt;int&gt;\n1     0                   0     0                 0             0\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;int&gt;, `Visibility (10m)` &lt;int&gt;,\n#   `Dew point temperature(°C)` &lt;int&gt;, `Solar Radiation (MJ/m2)` &lt;int&gt;,\n#   `Rainfall(mm)` &lt;int&gt;, `Snowfall (cm)` &lt;int&gt;, Seasons &lt;int&gt;, Holiday &lt;int&gt;,\n#   `Functioning Day` &lt;int&gt;\n\n\nFrom this output, we see that our data is not missing any data and we can proceed ahead.\n2. Check the column types and the values within the columns to make sure they make sense (basic summary stats for numeric columns and check the unique values for the categorical variables).\nWe first can examine the unique values for the categorical variables, and see that all of the unique values for the categorical variables make sense.\n\nstr(bike_data)\n\nspc_tbl_ [8,760 × 14] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Date                     : chr [1:8760] \"01/12/2017\" \"01/12/2017\" \"01/12/2017\" \"01/12/2017\" ...\n $ Rented Bike Count        : num [1:8760] 254 204 173 107 78 100 181 460 930 490 ...\n $ Hour                     : num [1:8760] 0 1 2 3 4 5 6 7 8 9 ...\n $ Temperature(°C)          : num [1:8760] -5.2 -5.5 -6 -6.2 -6 -6.4 -6.6 -7.4 -7.6 -6.5 ...\n $ Humidity(%)              : num [1:8760] 37 38 39 40 36 37 35 38 37 27 ...\n $ Wind speed (m/s)         : num [1:8760] 2.2 0.8 1 0.9 2.3 1.5 1.3 0.9 1.1 0.5 ...\n $ Visibility (10m)         : num [1:8760] 2000 2000 2000 2000 2000 ...\n $ Dew point temperature(°C): num [1:8760] -17.6 -17.6 -17.7 -17.6 -18.6 -18.7 -19.5 -19.3 -19.8 -22.4 ...\n $ Solar Radiation (MJ/m2)  : num [1:8760] 0 0 0 0 0 0 0 0 0.01 0.23 ...\n $ Rainfall(mm)             : num [1:8760] 0 0 0 0 0 0 0 0 0 0 ...\n $ Snowfall (cm)            : num [1:8760] 0 0 0 0 0 0 0 0 0 0 ...\n $ Seasons                  : chr [1:8760] \"Winter\" \"Winter\" \"Winter\" \"Winter\" ...\n $ Holiday                  : chr [1:8760] \"No Holiday\" \"No Holiday\" \"No Holiday\" \"No Holiday\" ...\n $ Functioning Day          : chr [1:8760] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Date = col_character(),\n  ..   `Rented Bike Count` = col_double(),\n  ..   Hour = col_double(),\n  ..   `Temperature(°C)` = col_double(),\n  ..   `Humidity(%)` = col_double(),\n  ..   `Wind speed (m/s)` = col_double(),\n  ..   `Visibility (10m)` = col_double(),\n  ..   `Dew point temperature(°C)` = col_double(),\n  ..   `Solar Radiation (MJ/m2)` = col_double(),\n  ..   `Rainfall(mm)` = col_double(),\n  ..   `Snowfall (cm)` = col_double(),\n  ..   Seasons = col_character(),\n  ..   Holiday = col_character(),\n  ..   `Functioning Day` = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\nunique(bike_data$Seasons)\n\n[1] \"Winter\" \"Spring\" \"Summer\" \"Autumn\"\n\nunique(bike_data$Holiday)\n\n[1] \"No Holiday\" \"Holiday\"   \n\nunique(bike_data$`Functioning Day`)\n\n[1] \"Yes\" \"No\" \n\nhead(unique(bike_data$Date)) #Here Date is in a character format\n\n[1] \"01/12/2017\" \"02/12/2017\" \"03/12/2017\" \"04/12/2017\" \"05/12/2017\"\n[6] \"06/12/2017\"\n\n\nWe can then examine the summary stats for our numeric variables.\n\nsummary(bike_data[sapply(bike_data, is.numeric)])\n\n Rented Bike Count      Hour       Temperature(°C)   Humidity(%)   \n Min.   :   0.0    Min.   : 0.00   Min.   :-17.80   Min.   : 0.00  \n 1st Qu.: 191.0    1st Qu.: 5.75   1st Qu.:  3.50   1st Qu.:42.00  \n Median : 504.5    Median :11.50   Median : 13.70   Median :57.00  \n Mean   : 704.6    Mean   :11.50   Mean   : 12.88   Mean   :58.23  \n 3rd Qu.:1065.2    3rd Qu.:17.25   3rd Qu.: 22.50   3rd Qu.:74.00  \n Max.   :3556.0    Max.   :23.00   Max.   : 39.40   Max.   :98.00  \n Wind speed (m/s) Visibility (10m) Dew point temperature(°C)\n Min.   :0.000    Min.   :  27     Min.   :-30.600          \n 1st Qu.:0.900    1st Qu.: 940     1st Qu.: -4.700          \n Median :1.500    Median :1698     Median :  5.100          \n Mean   :1.725    Mean   :1437     Mean   :  4.074          \n 3rd Qu.:2.300    3rd Qu.:2000     3rd Qu.: 14.800          \n Max.   :7.400    Max.   :2000     Max.   : 27.200          \n Solar Radiation (MJ/m2)  Rainfall(mm)     Snowfall (cm)    \n Min.   :0.0000          Min.   : 0.0000   Min.   :0.00000  \n 1st Qu.:0.0000          1st Qu.: 0.0000   1st Qu.:0.00000  \n Median :0.0100          Median : 0.0000   Median :0.00000  \n Mean   :0.5691          Mean   : 0.1487   Mean   :0.07507  \n 3rd Qu.:0.9300          3rd Qu.: 0.0000   3rd Qu.:0.00000  \n Max.   :3.5200          Max.   :35.0000   Max.   :8.80000  \n\n\nFrom our investigation on the summaries of the numeric variables, most of them make sense. However, we may want to investigate the Snowfall and Rainfall variables further.\n3. Convert the Date column into an actual date (if need be). Recall the lubridate package.\nWe noticed in our unique character values investigation that the Date variable is originally in the “DD/MM/YYYY” format and thus needs to be converted to a date variable with lubridate::dmy().\n\nlibrary(lubridate)\n\nbike_data$Date &lt;- dmy(bike_data$Date)\nbike_data\n\n# A tibble: 8,760 × 14\n   Date       `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n   &lt;date&gt;                   &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 2017-12-01                 254     0              -5.2            37\n 2 2017-12-01                 204     1              -5.5            38\n 3 2017-12-01                 173     2              -6              39\n 4 2017-12-01                 107     3              -6.2            40\n 5 2017-12-01                  78     4              -6              36\n 6 2017-12-01                 100     5              -6.4            37\n 7 2017-12-01                 181     6              -6.6            35\n 8 2017-12-01                 460     7              -7.4            38\n 9 2017-12-01                 930     8              -7.6            37\n10 2017-12-01                 490     9              -6.5            27\n# ℹ 8,750 more rows\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;chr&gt;, Holiday &lt;chr&gt;,\n#   `Functioning Day` &lt;chr&gt;\n\n\n4. Turn the character variables (Seasons, Holiday, and Functioning Day) into factors.\nWe can then turn the character variables into factors with as.factor().\n\nbike_data &lt;- bike_data |&gt;\n  mutate(Seasons = as.factor(Seasons),\n         Holiday = as.factor(Holiday),\n         `Functioning Day` = as.factor(`Functioning Day`))\nbike_data\n\n# A tibble: 8,760 × 14\n   Date       `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n   &lt;date&gt;                   &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 2017-12-01                 254     0              -5.2            37\n 2 2017-12-01                 204     1              -5.5            38\n 3 2017-12-01                 173     2              -6              39\n 4 2017-12-01                 107     3              -6.2            40\n 5 2017-12-01                  78     4              -6              36\n 6 2017-12-01                 100     5              -6.4            37\n 7 2017-12-01                 181     6              -6.6            35\n 8 2017-12-01                 460     7              -7.4            38\n 9 2017-12-01                 930     8              -7.6            37\n10 2017-12-01                 490     9              -6.5            27\n# ℹ 8,750 more rows\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;fct&gt;, Holiday &lt;fct&gt;,\n#   `Functioning Day` &lt;fct&gt;\n\n\n5. Lastly, rename the all the variables to have easy to use names (I use lower snake case but whatever you’d like is fine)\nWe notice that some variables have spaces and their units attached to them, so for ease of use we can rename them.\n\nbike_data &lt;- bike_data |&gt;\n  rename(\"date\" = \"Date\",\n         \"bike_count\" = \"Rented Bike Count\",\n         \"hour\" = \"Hour\",\n         \"temperature\" = \"Temperature(°C)\",\n         \"humidity\" = \"Humidity(%)\",\n         \"wind_speed\" = \"Wind speed (m/s)\",\n         \"visibility\" = \"Visibility (10m)\",\n         \"dew_point_temp\" = \"Dew point temperature(°C)\",\n         \"solar_radiation\" = \"Solar Radiation (MJ/m2)\",\n         \"rainfall\" = \"Rainfall(mm)\" ,\n         \"snowfall\" = \"Snowfall (cm)\",\n         \"seasons\" = \"Seasons\",\n         \"holiday\" = \"Holiday\",\n         \"functioning_day\" = \"Functioning Day\")\n\n6. Create summary statistics (especially related to the bike rental count). These should be done across your categorical variables as well. You should notice something about the Functioning Day variable. Subset the data appropriately based on that.\nWe first want to create some summary statistics across our categorical variables.\n\n# For seasons\nbike_data |&gt;\n  group_by(seasons) |&gt;\n  summarize(across(bike_count, .fns = list(\"mean\" = mean,\n                                                \"median\" = median,\n                                                \"var\" = var,\n                                                \"sd\" = sd,\n                                                \"IQR\" = IQR,\n                                                \"min\" = min,\n                                                \"max\" = max), .names = \"{.fn}_{.col}\"))\n\n# A tibble: 4 × 8\n  seasons mean_bike_count median_bike_count var_bike_count sd_bike_count\n  &lt;fct&gt;             &lt;dbl&gt;             &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;\n1 Autumn             820.              764.        423912.          651.\n2 Spring             730.              583         386274.          622.\n3 Summer            1034.              906.        476438.          690.\n4 Winter             226.              203          22612.          150.\n# ℹ 3 more variables: IQR_bike_count &lt;dbl&gt;, min_bike_count &lt;dbl&gt;,\n#   max_bike_count &lt;dbl&gt;\n\n\n\n# For holiday\nbike_data |&gt;\n  group_by(holiday) |&gt;\n  summarize(across(bike_count, .fns = list(\"mean\" = mean,\n                                                \"median\" = median,\n                                                \"var\" = var,\n                                                \"sd\" = sd,\n                                                \"IQR\" = IQR,\n                                                \"min\" = min,\n                                                \"max\" = max), .names = \"{.fn}_{.col}\"))\n\n# A tibble: 2 × 8\n  holiday    mean_bike_count median_bike_count var_bike_count sd_bike_count\n  &lt;fct&gt;                &lt;dbl&gt;             &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;\n1 Holiday               500.              240         325782.          571.\n2 No Holiday            715.              524.        418453.          647.\n# ℹ 3 more variables: IQR_bike_count &lt;dbl&gt;, min_bike_count &lt;dbl&gt;,\n#   max_bike_count &lt;dbl&gt;\n\n\n\n# For functioning day\nbike_data |&gt;\n  group_by(functioning_day) |&gt;\n  summarize(across(bike_count, .fns = list(\"mean\" = mean,\n                                                \"median\" = median,\n                                                \"var\" = var,\n                                                \"sd\" = sd,\n                                                \"IQR\" = IQR,\n                                                \"min\" = min,\n                                                \"max\" = max), .names = \"{.fn}_{.col}\"))\n\n# A tibble: 2 × 8\n  functioning_day mean_bike_count median_bike_count var_bike_count sd_bike_count\n  &lt;fct&gt;                     &lt;dbl&gt;             &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;\n1 No                           0                  0             0             0 \n2 Yes                        729.               542        412615.          642.\n# ℹ 3 more variables: IQR_bike_count &lt;dbl&gt;, min_bike_count &lt;dbl&gt;,\n#   max_bike_count &lt;dbl&gt;\n\n\nHere we notice something strange with our Functioning Day categorical variable for the No level, all of the numerical summaries are zero across this level. So we can subset our data to only include Functioning Day where the level is Yes.\n\nbike_data &lt;- bike_data |&gt;\n  filter(functioning_day == \"Yes\")\nbike_data\n\n# A tibble: 8,465 × 14\n   date       bike_count  hour temperature humidity wind_speed visibility\n   &lt;date&gt;          &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 2017-12-01        254     0        -5.2       37        2.2       2000\n 2 2017-12-01        204     1        -5.5       38        0.8       2000\n 3 2017-12-01        173     2        -6         39        1         2000\n 4 2017-12-01        107     3        -6.2       40        0.9       2000\n 5 2017-12-01         78     4        -6         36        2.3       2000\n 6 2017-12-01        100     5        -6.4       37        1.5       2000\n 7 2017-12-01        181     6        -6.6       35        1.3       2000\n 8 2017-12-01        460     7        -7.4       38        0.9       2000\n 9 2017-12-01        930     8        -7.6       37        1.1       2000\n10 2017-12-01        490     9        -6.5       27        0.5       1928\n# ℹ 8,455 more rows\n# ℹ 7 more variables: dew_point_temp &lt;dbl&gt;, solar_radiation &lt;dbl&gt;,\n#   rainfall &lt;dbl&gt;, snowfall &lt;dbl&gt;, seasons &lt;fct&gt;, holiday &lt;fct&gt;,\n#   functioning_day &lt;fct&gt;\n\n\n7. To simplify our analysis, we’ll summarize across the hours so that each day has one observation associated with it.\n• (I’m using my new names here. Your names may not match and that’s ok!) Let’s group_by() the date, seasons, and holiday variables.\n• Find the sum of the bike_count, rainfall, and snowfall variables\n• Find the mean of all the weather related variables.\n• This will be our new data that we’ll analyze!\nWe’ll combine this into one data step.\n\nlibrary(dplyr)\n\ndaily_data &lt;- bike_data |&gt;\n  group_by(date, seasons, holiday) |&gt;\n  summarize(\"total_bike_count\" = sum(bike_count),\n         \"total_rainfall\" = sum(rainfall),\n         \"total_snowfall\" = sum(snowfall),\n         \"average_temp\" = mean(temperature),\n         \"average_humidity\" = mean(humidity),\n         \"average_wind_speed\" = mean(wind_speed),\n         \"average_visibility\" = mean(visibility),\n         \"average_dew_point_temp\" = mean(dew_point_temp),\n         \"average_solar_radiation\" = mean(solar_radiation))\n\n`summarise()` has grouped output by 'date', 'seasons'. You can override using\nthe `.groups` argument.\n\ndaily_data\n\n# A tibble: 353 × 12\n# Groups:   date, seasons [353]\n   date       seasons holiday    total_bike_count total_rainfall total_snowfall\n   &lt;date&gt;     &lt;fct&gt;   &lt;fct&gt;                 &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n 1 2017-12-01 Winter  No Holiday             9539            0              0  \n 2 2017-12-02 Winter  No Holiday             8523            0              0  \n 3 2017-12-03 Winter  No Holiday             7222            4              0  \n 4 2017-12-04 Winter  No Holiday             8729            0.1            0  \n 5 2017-12-05 Winter  No Holiday             8307            0              0  \n 6 2017-12-06 Winter  No Holiday             6669            1.3            8.6\n 7 2017-12-07 Winter  No Holiday             8549            0             10.4\n 8 2017-12-08 Winter  No Holiday             8032            0              0  \n 9 2017-12-09 Winter  No Holiday             7233            0              0  \n10 2017-12-10 Winter  No Holiday             3453            4.1           32.5\n# ℹ 343 more rows\n# ℹ 6 more variables: average_temp &lt;dbl&gt;, average_humidity &lt;dbl&gt;,\n#   average_wind_speed &lt;dbl&gt;, average_visibility &lt;dbl&gt;,\n#   average_dew_point_temp &lt;dbl&gt;, average_solar_radiation &lt;dbl&gt;\n\n\n8. Recreate your basic summary stats and then create some plots to explore relationships. Report correlation between your numeric variables as well.\nWe first need to recreate our basic summary stats.\n\nsummary(daily_data)\n\n      date              seasons         holiday    total_bike_count\n Min.   :2017-12-01   Autumn:81   Holiday   : 17   Min.   :  977   \n 1st Qu.:2018-02-27   Spring:90   No Holiday:336   1st Qu.: 6967   \n Median :2018-05-28   Summer:92                    Median :18563   \n Mean   :2018-05-28   Winter:90                    Mean   :17485   \n 3rd Qu.:2018-08-24                                3rd Qu.:26285   \n Max.   :2018-11-30                                Max.   :36149   \n total_rainfall   total_snowfall    average_temp     average_humidity\n Min.   : 0.000   Min.   : 0.000   Min.   :-14.738   Min.   :22.25   \n 1st Qu.: 0.000   1st Qu.: 0.000   1st Qu.:  3.304   1st Qu.:47.58   \n Median : 0.000   Median : 0.000   Median : 13.738   Median :57.17   \n Mean   : 3.576   Mean   : 1.863   Mean   : 12.776   Mean   :58.17   \n 3rd Qu.: 0.500   3rd Qu.: 0.000   3rd Qu.: 22.592   3rd Qu.:67.71   \n Max.   :95.500   Max.   :78.700   Max.   : 33.742   Max.   :95.88   \n average_wind_speed average_visibility average_dew_point_temp\n Min.   :0.6625     Min.   : 214.3     Min.   :-27.750       \n 1st Qu.:1.3042     1st Qu.:1087.0     1st Qu.: -5.188       \n Median :1.6583     Median :1557.8     Median :  4.612       \n Mean   :1.7261     Mean   :1434.0     Mean   :  3.954       \n 3rd Qu.:1.9542     3rd Qu.:1874.3     3rd Qu.: 14.921       \n Max.   :4.0000     Max.   :2000.0     Max.   : 25.038       \n average_solar_radiation\n Min.   :0.02917        \n 1st Qu.:0.28333        \n Median :0.56500        \n Mean   :0.56773        \n 3rd Qu.:0.82000        \n Max.   :1.21667        \n\n\nWe can then create some plots to explore the relationships in our daily data.\nWe first can examine a scatterplot between the total bike count per day and the average temperture for that day.\n\nlibrary(ggplot2)\nscatter &lt;- ggplot(daily_data, aes(x = average_temp, y = total_bike_count)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\") +\n  labs(title = \"Total Bike Count vs Average Temperature\",\n       x = \"Average Temperature (in Celsius)\",\n       y = \"Total Bike Count\")\nscatter\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWe notice that there appears to be a positive relationship between total bike count and the average temperature, which is to be expected considering people would likely be more inclined to rent a bike to ride in warmer weather.\nWe can also examine the box plots for total bike count based on the season.\n\nboxplot &lt;- ggplot(daily_data, aes(x = seasons, y = total_bike_count, color = seasons)) +\n  geom_boxplot() +\n  labs(title = \"Total Bike Count by Season\",\n       x = \"Season\",\n       y = \"Total Bike Count\") +\n  scale_color_discrete(\"Season\")\nboxplot\n\n\n\n\n\n\n\n\nAgain through this boxplot we see a similar trend as in our scatterplot, where less people rent a bike in the colder weather (i.e. winter season).\nWe can also examine the correlation between our numeric variables in the form of a correlation matrix.\n\nlibrary(corrplot)\n\nWarning: package 'corrplot' was built under R version 4.3.3\n\n\ncorrplot 0.92 loaded\n\nnumeric_vars &lt;- daily_data |&gt;\n  select(total_bike_count:average_solar_radiation) |&gt;\n  as.data.frame()\n\nAdding missing grouping variables: `date`, `seasons`\n\nnumeric_vars &lt;- numeric_vars |&gt; select(-date, -seasons)\n\n# Calculate the correlation matrix\ncor_matrix &lt;- cor(numeric_vars, use = \"complete.obs\")\n\ncorrplot(cor_matrix, method = \"number\")\n\n\n\n\n\n\n\n\nFrom our correlation plot we can confirm that there is a positive linear relationship between the total bike count and the average temperature."
  },
  {
    "objectID": "Fitting Linear Models.html#split-the-data",
    "href": "Fitting Linear Models.html#split-the-data",
    "title": "Fitting Linear Models",
    "section": "Split the Data",
    "text": "Split the Data\nUse functions from tidymodels to split the data into a training and test set (75/25 split). Use the strata argument to stratify the split on the seasons variable\n\nlibrary(tidymodels)\nset.seed(123)\ndaily_split &lt;- initial_split(daily_data, prop = 0.75, strata = seasons)\ndaily_train &lt;- training(daily_split)\ndaily_test &lt;- testing(daily_split)\n\nOn the training set, create a 10 fold CV split\n\nset.seed(123)\ndaily_10_fold &lt;- vfold_cv(daily_train, 10)"
  },
  {
    "objectID": "Fitting Linear Models.html#fitting-mlr",
    "href": "Fitting Linear Models.html#fitting-mlr",
    "title": "Fitting Linear Models",
    "section": "Fitting MLR",
    "text": "Fitting MLR\nFirst, let’s create some recipes.\nFor the 1st recipe:\n• Let’s ignore the date variable for modeling (so we’ll need to remove that or give it a different ID) but use it to create a weekday/weekend (factor) variable. (See step 2 of the shinymodels tutorial! You can use step_date() then step_mutate() with a factor(if_else(…)) to create the variable. I then had to remove the intermediate variable created.)\n• Let’s standardize the numeric variables since their scales are pretty different.\n• Let’s create dummy variables for the seasons, holiday, and our new day type variable\n\nrecipe_1 &lt;- recipe(total_bike_count ~ ., data = daily_train) |&gt;\n  step_mutate(day_type = factor(if_else(wday(date) %in% c(1,7), \"Weekend\", \"Weekday\"))) |&gt;\n  step_rm(date) |&gt;\n  step_normalize(all_numeric(), -all_outcomes()) |&gt;\n  step_dummy(seasons, holiday, day_type)\n\nFor the 2nd recipe:\n• Do the same steps as above.\n• Add in interactions between seasons and holiday, seasons and temp, temp and rainfall. For the seasons interactions, you can use starts_with() to create the proper interactions.\n\nrecipe_2 &lt;- recipe(total_bike_count ~ ., data = daily_train) |&gt;\n  step_mutate(day_type = factor(if_else(wday(date) %in% c(1,7), \"Weekend\", \"Weekday\"))) |&gt;\n  step_rm(date) |&gt;\n  step_normalize(all_numeric(), -all_outcomes()) |&gt;\n  step_dummy(seasons, holiday, day_type) |&gt;\n  step_interact(terms = ~ starts_with(\"seasons\"):starts_with(\"holiday\")) |&gt;\n  step_interact(terms = ~ starts_with(\"seasons\"):average_temp) |&gt;\n  step_interact(terms = ~ average_temp:total_rainfall) \n\nFor the 3rd recipe:\n• Do the same as the 2nd recipe.\n• Add in quadratic terms for each numeric predictor\n\nrecipe_3 &lt;- recipe(total_bike_count ~ ., data = daily_train) |&gt;\n  step_mutate(day_type = factor(if_else(wday(date) %in% c(1,7), \"Weekend\", \"Weekday\"))) |&gt;\n  step_rm(date) |&gt;\n  step_normalize(all_numeric(), -all_outcomes()) |&gt;\n  step_dummy(seasons, holiday, day_type) |&gt;\n  step_interact(terms = ~ starts_with(\"seasons\"):starts_with(\"holiday\")) |&gt;\n  step_interact(terms = ~ starts_with(\"seasons\"):average_temp) |&gt;\n  step_interact(terms = ~ average_temp:total_rainfall) |&gt;\n  step_poly(total_rainfall,\n            total_snowfall,\n            average_temp,\n            average_humidity,\n            average_wind_speed,\n            average_visibility,\n            average_dew_point_temp,\n            average_solar_radiation, \n            degree = 2)\n\nNow set up our linear model fit to use the “lm” engine.\n\ndaily_model &lt;- linear_reg() |&gt;\n  set_engine(\"lm\")\n\nFit the models using 10 fold CV via fit_resamples() and consider the training set CV error to choose a best model.\n\ndaily_CV_fits_1 &lt;- workflow() |&gt;\n  add_recipe(recipe_1) |&gt;\n  add_model(daily_model) |&gt;\n  fit_resamples(daily_10_fold) \n\ndaily_CV_fits_1 |&gt;\n  collect_metrics()\n\n# A tibble: 2 × 6\n  .metric .estimator     mean     n   std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   4189.       10 114.      Preprocessor1_Model1\n2 rsq     standard      0.827    10   0.00946 Preprocessor1_Model1\n\n\n\ndaily_CV_fits_2 &lt;- workflow() |&gt;\n  add_recipe(recipe_2) |&gt;\n  add_model(daily_model) |&gt;\n  fit_resamples(daily_10_fold)\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n\nThere were issues with some computations   A: x1\n\n\nThere were issues with some computations   A: x5\n\n\nThere were issues with some computations   A: x10\n\n\n\n\ndaily_CV_fits_2 |&gt;\n  collect_metrics()\n\n# A tibble: 2 × 6\n  .metric .estimator     mean     n  std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   3094.       10 243.     Preprocessor1_Model1\n2 rsq     standard      0.902    10   0.0155 Preprocessor1_Model1\n\n\n\ndaily_CV_fits_3 &lt;- workflow() |&gt;\n  add_recipe(recipe_3) |&gt;\n  add_model(daily_model) |&gt;\n  fit_resamples(daily_10_fold)\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n\nThere were issues with some computations   A: x7\n\n\nThere were issues with some computations   A: x10\n\n\n\n\ndaily_CV_fits_3 |&gt;\n  collect_metrics()\n\n# A tibble: 2 × 6\n  .metric .estimator     mean     n  std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   3073.       10 240.     Preprocessor1_Model1\n2 rsq     standard      0.905    10   0.0157 Preprocessor1_Model1\n\n\nNow that we fit all three models, we can compare the CV error on the training set and see that our third model with the quadratic term has the lowest CV error.\nUsing your ‘best’ model, fit the model to the entire training data set (use the last_fit() function).\n• Compute the RMSE metric on the test set.\n\nfinal_wf &lt;- workflow() |&gt;\n  add_recipe(recipe_3) |&gt;\n  add_model(daily_model)\n  \nfinal_fit &lt;- final_wf |&gt;\n  last_fit(daily_split)\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\nfinal_fit_metrics &lt;- final_fit |&gt;\n  collect_metrics()\nfinal_fit_metrics\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    2961.    Preprocessor1_Model1\n2 rsq     standard       0.917 Preprocessor1_Model1\n\n\nFrom using last_fit() we see that our RMSE on the test set is 2961.0537.\n• Obtain the final model (fit on the entire training set) coefficient table using extract_fit_parsnip() and tidy().\n\nfinal_coefficients &lt;- final_fit |&gt;\n  extract_fit_parsnip() |&gt;\n  tidy()\nfinal_coefficients\n\n# A tibble: 32 × 5\n   term                                estimate std.error statistic  p.value\n   &lt;chr&gt;                                  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)                           15069.     2182.     6.91  4.75e-11\n 2 seasons_Spring                        -6689.     3705.    -1.81  7.23e- 2\n 3 seasons_Summer                        18999.     7805.     2.43  1.57e- 2\n 4 seasons_Winter                        17284.     9420.     1.83  6.78e- 2\n 5 holiday_No.Holiday                     6285.     2054.     3.06  2.47e- 3\n 6 day_type_Weekend                      -2550.      394.    -6.47  5.67e-10\n 7 seasons_Spring_x_holiday_No.Holiday    2017.     3741.     0.539 5.90e- 1\n 8 seasons_Summer_x_holiday_No.Holiday   -5302.     7706.    -0.688 4.92e- 1\n 9 seasons_Winter_x_holiday_No.Holiday  -29446.     9420.    -3.13  2.00e- 3\n10 seasons_Spring_x_average_temp          4271.     1115.     3.83  1.65e- 4\n# ℹ 22 more rows"
  }
]